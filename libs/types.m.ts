/*
  This module contains type definitions and run-time type-checking code used
  throughout the app.
*/

/*
  A Party is a single group of players that persists across multiple games.
*/
export interface Party {
  players: Player[];

  // _ids of players with super cow powers.
  adminIds: string[];
}

/*
  A Player is a member of a Party and an participant in a Game. For now,
  a Player represents a single person within a game session, NOT a single
  user that persists across many sessions.
*/
export interface Player {
  _id: string;           // Unique identifier for this player
  displayName: string;   // User-chosen display name

  /*
    A secret used to authenticate player. This secret should be randomly
    generated by client and sent to server, but it should NOT be a player
    chosen password (these would have to be hashed). This secret is intended
    for temporary use during a game and is not a permanent account or
    authentication solution.

    This field should NOT be published.
  */
  secret: string;
}

/*
  A Game is an instance of a game, with its configuration options and game
  state, as players interact with it
*/
export interface Game {
  // What version of the game is this? Allows us to migrate rules and
  // game format gracefully in the future.
  version: number;

  /*
    A copy of the Party *at the time* the game was created. We make a copy
    because the Party may change from Game to Game -- e.g. a player is added
    or dropped.
  */
  party: Party;

  config: GameConfig;


  /* Game State */

  // Information used to represent the base state of the game
  planets: PlanetBase[];

  // Base (private) information about players (do not publish)
  playerState: PlayerBase;

  // List of completed turns for this game from oldest to newest.
  turns: Turn[];

  // Is this game done yet?
  complete: boolean;


  /* Timestamps */

  createdOn: Date;
  updatedOn: Date;
}

/*
  Options for configuring how an instance of this game is played
*/
export interface GameConfig {
  // How many planets should each player get by default?
  planetsPerPlayer: number;
}

// Immutable characteristics for a Planet
export interface PlanetBase {
  _id: string;

  // _id of Player who controls this planet
  ownerId: string;

  // Display name for this planet
  name: string;

  // Description text of what's on this planet
  description: string;
}

/*
  Private state for a player (public or immutable information is reflected in
  the Party type or other game state types)
*/
export interface PlayerBase {
  playerId: string;

  // Is this player the evil mastermind?
  isEvil: boolean;
}

/*
  Represents a completed turn and the state of things immediately following
  the
*/
export interface Turn {
  _id: string;
  planetStates: PlanetState[];

  // Action information that is public knowledge
  actions: Action[];

  // Additional state information private to a player or group of players
  // DO NOT PUBLISH
  playerStates: PlayerState[];

  // Players who have confirmed that they're ready to go
  playerIdsReady: string[];
}

/*
  Things about a planet that may change during a turn
*/
export interface PlanetState {
  planetId: string;
  destroyed: boolean;   // Has this planet been destroyed?

  defendingShips: {
    playerId?: string;  // _id of player owning ships
    count: number;      // Number of ships belonging to player
  };

  // Resources generated per turn for planet's owner
  resourceOutput: Resources;
}

// A set of our primary resources
export interface Resources {
  credits: number;
  energy: number;
  minerals: number;
}

export interface Action {
  _id: string;
  type: ActionType;

  /*
    Player engaged in action. Public state is null when anonymous. This field
    will be populated if player is allowed to know who engaged in this action.
  */
  playerId?: string;
}

export enum ActionType {
  // Resource Actions
  UPGRADE_PLANET,
  BUY_SHIPS,
  BUY_CARD,

  // Play an action card
  CARD,

  // Public attack / defend
  SHIP
}

/*
  A resource action is an act by a player that represents an expenditure
  of resources on some new item, like buying a ship. Private to player.
*/
export interface ResourceAction extends Action {
  cost: Resources;
}

/*
  Upgrades a planet's resource output. Private to player.
*/
export interface UpgradePlanetAction extends ResourceAction {
  planetId: string;
}

/*
  Purchase a player ship.
*/
export interface BuyShipsAction extends ResourceAction {
  count: string;
}

/*
  Buy an Action Card
*/
export interface BuyCardAction extends ResourceAction {
  cardId: string;
}

/*
  Represents an Action Card
*/
export interface Card {
  _id: string;
  type: CardType;
}

export enum CardType {
  SPY,
  COUNTER_SPY,
  BOMB,
  STEAL_RESOURCES,
  STEAL_CARD,
  SUPER_WEAPON
}

export interface CardAction extends Action {
  cardId: string;
}

// Card that targets planet
export interface PlanetCardAction extends CardAction {
  planetId: string;
}

// Card that targets another player
export interface PlayerCardAction extends CardAction {
  targetPlayerId: string; // Because playerId is used to denote player of card
}

/*
  Represents an attempt to defend or attack a planet
*/
export interface ShipAction extends Action {
  attack: boolean;    // True if attacking, false if defending
  planetId: string;   // Planet being attacked or defended
  numShips: number;   // Number of ship being commited
  shipsLost?: number; // Ships lost during attack
}

/*
  Private state of a player immediately after a turn has completed -- also
  used to record actions somewhat private to player during that turn
*/
export interface PlayerState {
  playerId: string;

  // Resources and cards controlled by player
  resources: Resources;
  cards: Card[];

  // Undeployed ships are ships not committed to any planet
  undeployedShips: number;

  // Actions by or affecting this player that are NOT public
  actions: Action[];

  // Supplemental information that a player may have about things
  planetStateSupplementals: PlanetStateSupplemental[];
  acntionSupplementals: ActionsSupplemental[];
}

/*
  Player's additional information about planets that may differ from or add
  to public state
*/
export interface PlanetStateSupplemental {
  planetId: string;

  // Does this planet have a super weapon? Null means "don't know", whereas
  // false means "confirmed no".
  hasSuperWeapon?: boolean;
}

/*
  Player's additional informaion about actions that may differ from or add
  to public state
*/
export interface ActionsSupplemental {
  actionId: string;

  // Used to de-anonymize anonymous players
  playerId: string;
}
